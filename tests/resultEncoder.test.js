const { encodeValue } = require("../src/resultEncoder");

describe("encodeValue", () => {
  test("Encode a number", () => {
    const encodedeValue = encodeValue(
      1234.567,
      1,
      "number",
      "0x2222222222222222222222222222222222222222222222222222222222222222"
    );
    expect(encodedeValue).toStrictEqual(
      "0x2222222222222222222222222222222222222222222222222222222222222222000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000042ed0f117bd3ad8000"
    );
  });
  test("Encode a string", () => {
    const encodedeValue = encodeValue(
      "hello",
      1,
      "string",
      "0x2222222222222222222222222222222222222222222222222222222222222222"
    );
    expect(encodedeValue).toStrictEqual(
      "0x22222222222222222222222222222222222222222222222222222222222222220000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000568656c6c6f000000000000000000000000000000000000000000000000000000"
    );
  });
  test("Encode a boolean", () => {
    const encodedeValue = encodeValue(
      false,
      1,
      "boolean",
      "0x2222222222222222222222222222222222222222222222222222222222222222"
    );
    expect(encodedeValue).toStrictEqual(
      "0x22222222222222222222222222222222222222222222222222222222222222220000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000"
    );
  });
  test("Fail if the dataType isnt possible", () => {
    expect(() => {
      encodeValue(
        false,
        1,
        "Object",
        "0x2222222222222222222222222222222222222222222222222222222222222222"
      );
    }).toThrow(
      Error(
        "Expected a data type in this list : number, string, boolean. Got Object"
      )
    );
  });

  test("Fail if number expected but other type provided", () => {
    expect(() => {
      encodeValue(
        true,
        1,
        "number",
        "0x2222222222222222222222222222222222222222222222222222222222222222"
      );
    }).toThrow();
  });
  test("Fail if string expected but other type provided", () => {
    expect(() => {
      encodeValue(
        false,
        1,
        "string",
        "0x2222222222222222222222222222222222222222222222222222222222222222"
      );
    }).toThrow();
  });
  test("Fail if boolean expected but other type provided", () => {
    expect(() => {
      encodeValue(
        "Hello",
        1,
        "boolean",
        "0x2222222222222222222222222222222222222222222222222222222222222222"
      );
    }).toThrow();
  });
});
